pipeline {
    agent any

    environment {
        
        PROJECT_REPO_PATH = "/var/lib/jenkins/workspace/Proyecto2AyD2-dev"

        DEPLOY_BACKEND_DIR = "/var/api/project2AyD2-backend"

        COMMON_LIB_IS_DEPLOYED = false

        MICRO_SERVICE_EUREKA = "eureka-server"
        SERVICE_EUREKA_NAME_JAR = "eureka-server.jar"
        DEPLOY_EUREKA_JAR = false
        
        MICRO_SERVICE_API_GATEWAY = "api-gateway"
        SERVICE_API_GATEWAY_NAME_JAR = "api-gateway.jar"
        DEPLOY_API_GATEWAY_JAR = false
        
        MICRO_SERVICE_CONFIG = "config-service"
        SERVICE_CONFIG_NAME_JAR = "config-service.jar"
        DEPLOY_CONFIG_JAR = false
        
        MICRO_SERVICE_EMPLOYEE = "employee-service"
        SERVICE_EMPLOYEE_NAME_JAR = "employee-service.jar"
        DEPLOY_EMPLOYEE_JAR = false
        
        MICRO_SERVICE_GAME = "game-service"
        SERVICE_GAME_NAME_JAR = "game-service.jar"
        DEPLOY_GAME_JAR = false
        
        MICRO_SERVICE_INVENTORY = "inventory-service"
        SERVICE_INVENTORY_NAME_JAR = "inventory-service.jar"
        DEPLOY_INVENTORY_JAR = false
        
        MICRO_SERVICE_INVOICE = "invoice-service"
        SERVICE_INVOICE_NAME_JAR = "invoice-service.jar"
        DEPLOY_INVOICE_JAR = false
        
        MICRO_SERVICE_PACKAGE = "package-service"
        SERVICE_PACKAGE_NAME_JAR = "package-service.jar"
        DEPLOY_PACKAGE_JAR = false
        
        MICRO_SERVICE_PRODUCT = "product-service"
        SERVICE_PRODUCT_NAME_JAR = "product-service.jar"
        DEPLOY_PRODUCT_JAR = false
        
        MICRO_SERVICE_RESERVATION = "reservation-service"
        SERVICE_RESERVATION_NAME_JAR = "reservation-service.jar"
        DEPLOY_RESERVATION_JAR = false
        
    }

    stages {
        
        stage('Checkout') {
            steps {
                git branch: 'dev', url: 'https://github.com/FernandoJRR/Proyecto2AyD2-Back.git'
            }
        }
        // Construccion de la librer√≠a com√∫n
        stage ('Build Common Lib'){
            steps {
                script {
                    // La libreria com√∫n se encuentra en la ra√≠z del proyecto y no tiene pruebas
                    echo "üöÄ Compilando librer√≠a com√∫n"
                    def changes = ""
                    def shouldBuild = false
                    dir('common-lib') {
                        changes = sh(script: 'git diff --name-only HEAD HEAD~1', returnStdout: true).trim()
                        // Verificamos si existe la carpeta target ya que si no existe significa que no se ha compilado
                        echo "üöÄ Cambios en la librer√≠a com√∫n: ${changes}"
                        if(!fileExists('target')) {
                            shouldBuild = true
                            echo "üöÄ La carpeta target no existe, se compila la librer√≠a com√∫n"
                        }
                    }
                    if (changes || shouldBuild) {
                        echo "üöÄ Compilando librer√≠a com√∫n"
                        dir('common-lib') {
                            sh 'mvn clean install -DskipTests'
                        }
                        COMMON_LIB_IS_DEPLOYED = true
                    } else {
                        echo "üöÄ No hay cambios en la librer√≠a com√∫n, no se compila."
                        // Marcamos COMMON_LIB_IS_DEPLOYED como falso ya que no se ha compilado
                        COMMON_LIB_IS_DEPLOYED = false
                    }
                }
            }
        }
        // Construccion del servicio Eureka
        stage('Build Eureka Server'){
            steps{
                script{
                    echo "üöÄ Compilando Eureka Server"
                    def changes = ""
                    def shouldBuild = false
                    dir('eureka-server') {
                        changes = sh(script: 'git diff --name-only HEAD HEAD~1', returnStdout: true).trim()
                        // Verificamos si existe la carpeta target ya que si no existe significa que no se ha compilado
                        echo "üöÄ Cambios en el Eureka Server: ${changes}"
                        if(!fileExists('target')) {
                            shouldBuild = true
                            echo "üöÄ La carpeta target no existe, se compila el Eureka Server"
                        }
                    }
                    if (changes || shouldBuild) {
                        echo "üöÄ Compilando Eureka Server"
                        dir('eureka-server') {
                            sh 'mvn clean install -DskipTests'
                        }
                        DEPLOY_EUREKA_JAR = true
                    } else {
                        echo "üöÄ No hay cambios en el Eureka Server, no se compila."
                        // Marcamos DEPLOY_EUREKA_JAR como falso ya que no se ha compilado
                        DEPLOY_EUREKA_JAR = false
                    }
                }
            }
        }
        // Construccion del servicio API Gateway
        stage('Build API Gateway'){
            steps{
                script{
                    echo "üöÄ Compilando API Gateway"
                    def changes = ""
                    def shouldBuild = false
                    dir('api-gateway') {
                        changes = sh(script: 'git diff --name-only HEAD HEAD~1', returnStdout: true).trim()
                        // Verificamos si existe la carpeta target ya que si no existe significa que no se ha compilado
                        echo "üöÄ Cambios en el API Gateway: ${changes}"
                        if(!fileExists('target')) {
                            shouldBuild = true
                            echo "üöÄ La carpeta target no existe, se compila el API Gateway"
                        }
                    }
                    if (changes || shouldBuild) {
                        echo "üöÄ Compilando API Gateway"
                        dir('api-gateway') {
                            sh 'mvn clean install -DskipTests'
                        }
                        DEPLOY_API_GATEWAY_JAR = true
                    } else {
                        echo "üöÄ No hay cambios en el API Gateway, no se compila."
                        // Marcamos DEPLOY_API_GATEWAY_JAR como falso ya que no se ha compilado
                        DEPLOY_API_GATEWAY_JAR = false
                    }
                }
            }
        }

    }

    post {
        success {
            echo "üéâ Pipeline completado con √©xito."
        }
        failure {
            echo "‚ùå Algo fall√≥ en el pipeline."
        }
    }
}
